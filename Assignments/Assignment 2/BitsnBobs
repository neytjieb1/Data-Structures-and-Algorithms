//Step 3: backtrack
      if (element.equals(-12)) {
         System.out.println("hello");
      }
      prev = updateBF(newNode, prev);

      if (Math.abs(prev.balanceFactor) == 2) {
         prev = reBalance(prev);
      }

      //Step 4: Incorporate into tree
      p = getParent(prev.data);
      if (prev.data.compareTo(p.data) < 0) {
         p.left = prev;
      }
      else {
         p.right = prev;
      }


      if ( (GP.balanceFactor==2 && GP.right.balanceFactor==1) || GP.balanceFactor==-2 && GP.left.balanceFactor==-1) {
         GP = homogeneousRotation(GP);
      }
      else {
         GP = heteroRotate(GP);
      }
      return GP;


if (Ch.equals(P.left)) {
         P.balanceFactor--;
      }
      else {
         P.balanceFactor++;
      }
      while (P!=root && Math.abs(P.balanceFactor)!=2) {
         Ch = P;
         P = getParent(P.data);
         if (Ch.balanceFactor == 0) {
            return Ch;
         }
         if (Ch.equals(P.left)) {
            P.balanceFactor--;
         }
         else {
            P.balanceFactor++;
         }
      }
      return P;


System.out.println("\n\nRoot: " + t1.getRoot().data + " bf: " + t1.getRoot().balanceFactor);
      System.out.println("Left: " + t1.getRoot().left.data + " bf: " + t1.getRoot().left.balanceFactor);
      System.out.println("Right: " + t1.getRoot().right.data+ " bf: " + t1.getRoot().right.balanceFactor);
      t1.getRoot().right =  t1.rightRot(t1.getRoot().right);
      System.out.println("Root: " + t1.getRoot().data + " bf: " + t1.getRoot().balanceFactor);
      System.out.println("Left: " + t1.getRoot().left.data + " bf: " + t1.getRoot().left.balanceFactor);
      System.out.println("Right: " + t1.getRoot().right.data+ " bf: " + t1.getRoot().right.balanceFactor);



==================================CONTAINS==================================
1. findElement
    - p.229

===================================INSERT===================================
1. Find space
    - if contains element
        + return false
    - else
        + justInsertElement

2. justInsertElement
    - if empty
        + insert easily
        + return true
    - if non-empty
        + insert
        + update BF's & assign to specific node
        + reBalance if necessary

3. update BF's
    -   Q = newNode
        P = prev
        if (P.left.el.equals(Q.el))  //or elements equal
            P.bf--;
        else
            P.bf++;

        while (P!=root && Math.abs(P.bf)!=2)
            Q = P
            P = getParent(P)
            if (Q.bf == 0)
                return
            if (P.left == Q)       //or elements equal
                P.bf--;
            else
                P.bf++;

4. reBalance
    -   GP = badBFNode
        case1: Rch_of_Rsbtr || Lch_of_Lsbtr
            homogeneous rotate
        case2: Lch_of_Rsbtr || Rch_of_Lsbtr
            heterogeneous rotate
    - return node

===================================HELPERS==================================
1. Get Parent(el)
    -   Node c = root
        Node p = null
        while (c!=null)
            if (el.equals(c.el))
                return p
            else if (el.compareTo(c.el) < 0)
                p = c
                c = c.left
            else
                p = c
                c = c.right
        throw new ArithmeticException("Insertion didn't work because we can't find the parent of the inserted node"

2. rightRot(P)          //right rotate about P
    - Ch = P.left
    - P.left = Ch.right
      C.right = P

3. leftRot(P)
    - Ch = P.right
    - P.right = Ch.left
      Ch.left = P

4. homRotate(GP, P, Ch)
    - if (GP.bf==2)
        leftRot(about GP)
        recalculate: gp.bf = h(r) - h(l)
        recalculate: p.bf = h(r)-h(l)
    - else
        rightRot(about GP)

5. hetRotate(GP, P, Ch)
    - if (GP.bf==2)
        leftRot(about P)
        rightRot(about GP)
    - else
        rightRot(about P)
        leftRot(about GP)


//             System.out.println("Deleted: " + val);
//             System.out.println("Size: " + t2.getNumberOfNodes());
//             System.out.println(isValidAVL(t2.getRoot()));
//             //t2.myOwnPreOrder(t2.getRoot());
             //System.out.println("");



       /*
       while (parent!=null) {
          calculateUpdatedBF(parent);
          if (Math.abs(parent.bf)==2) {
             get GP
             parent = rebalDelete(parent)
             link parent into list
          parent = getParent(parent.data)
       }
        */

 /*
       calculateUpdatedBF(parent);
       //Rebalance to root
       while (parent!=null) {
          ThreadedAVLNode<T> GP = getParent(parent.data); //should be null if parent == root
          //Determine: L/R child
          boolean leftChild = false;
          if (GP!=null) leftChild =  parent.equals(GP.left);
          //Unbalanced ?
          if (Math.abs(parent.balanceFactor) == 2) {
             parent = rebalDelete(parent);
             calculateUpdatedBF(parent);
             if (GP==null) {
                root = parent;
             }
             else if (leftChild) {
                GP.left = parent;
             }
             else {
                GP.right = parent;
             }
          }
          parent = GP;
          calculateUpdatedBF(parent);
       }
 */



    public ThreadedAVLTree(ThreadedAVLNode<T> node)
    {
       this.root = node;
    }


      System.out.println("For 11:" + t1.findFirstRGreatGP(t1.findNode(11)));
      System.out.println("For 4:" + t1.findFirstRGreatGP(t1.findNode(4)).data);
      System.out.println("For 7:" + t1.findFirstRGreatGP(t1.findNode(7)).data);
      System.out.println("For 2:" + t1.findFirstRGreatGP(t1.findNode(2)).data);
      System.out.println("For 1:" + t1.findFirstRGreatGP(t1.findNode(1)).data);
      System.out.println("For 3:" + t1.findFirstRGreatGP(t1.findNode(3)).data);
      System.out.println("For 15:" + t1.findFirstRGreatGP(t1.findNode(15)));
      System.out.println("For 14:" + t1.findFirstRGreatGP(t1.findNode(14)).data);
      System.out.println("For 20:" + t1.findFirstRGreatGP(t1.findNode(20)).data);
      System.out.println("For 17:" + t1.findFirstRGreatGP(t1.findNode(17)).data);
      System.out.println("For 22:" + t1.findFirstRGreatGP(t1.findNode(22)));
      System.out.println("For 23:" + t1.findFirstRGreatGP(t1.findNode(23)));
      System.out.println("For 24:" + t1.findFirstRGreatGP(t1.findNode(24)));


      public boolean contains(T element) {
            /*ThreadedAVLNode<T> p = root;
            while (p!=null) {
               if (element.equals(p.data)) {
                  return true;
               }
               else if (element.compareTo(p.data) < 0) {
                  p = p.left;
               }
               else {
                  p = p.right;
               }
            }
            return false;*/
         }




===================================DELETE===================================
0. Check empty/absent

1. Delete by Copying
    - p.254

2. Update Balance Factors up to root
    - updateBF(parent)
      parent = getParent(parent)
    - while (parent != root)
        updateBF(parent)
        if ( Math.abs(parent.bf)==2 )
            parent = rebalDelete(parent)
        parent = getParent(parent)
    - root = rebalDelete(parent)

3. Rebalance

    #1: Left branch delete + right==+1 --> root==2 --> 1 Left rotation
    #2: (Right branch delete + left was +1 --> root ==-2 --> 1 Right Rotation
    #3: Left branch delete + right==0 --> root==2 --> 1 Left rotation
    #4: (Mirror)
    #5: Left branch delete + right==-1 + Lch==-1 --> root==2 --> Double R-L rotation (R about RCh of badbf, L about badBF)
    #6: (Mirror)
    #7: Left branch delete + right==-1 + Lch==+1 --> root==2 --> Double R-L rotation (R about Rch of badBF, L about badBF)
    #8: (Mirror)


===================================HELPERS==================================

1. rebalDelete
    - if (node.bf==+2 & node.right==+1 || node.bf==+2 & node.right==0)
        leftRot (ie. homoRotate)
    - else if (node.bf==-2 & node.left==-1 || node.bf==-2 & node.left==0)
        rightRot (ie. homoRotate)
    - else if (node.bf==2)
        rightRot(rCh of node) (ie. heteroRotate)
        leftRot(node)
    - else
        leftRot(LCh of node) (ie. heteroRotate)
        rightRot(node)



OLD CLONE
/*public ThreadedAVLTree<T> clone() {      //only works with queues. Update to work with Threads
      //Breadth-First Traversal

         //Create cloneTree
         ThreadedAVLTree<T> clTree = new ThreadedAVLTree<T>();

         //if empty
         if (root==null) {
            return null;
         }
         else {
            clTree.root = new ThreadedAVLNode<T>(root.data, root.balanceFactor,root.hasThread);
            clTree.root.right = new ThreadedAVLNode<T>(root.right.data, root.right.balanceFactor,root.hasThread);
            clTree.root.left = new ThreadedAVLNode<T>(root.left.data, root.left.balanceFactor,root.hasThread);
         }

         ThreadedAVLNode<T> p = root;
         ThreadedAVLNode<T> clTemp = clTree.root;
         Queue<ThreadedAVLNode<T>> trueQ = new LinkedList<ThreadedAVLNode<T>>();
         Queue<ThreadedAVLNode<T>> cloneQ = new LinkedList<ThreadedAVLNode<T>>();

         if (p!=null) {
            trueQ.add(p);
            cloneQ.add(clTemp);

            while (!trueQ.isEmpty()) {
               p = trueQ.remove();
               clTemp = cloneQ.remove();

               //add p to new tree
               if (p.right != null)
                  clTemp.right = new ThreadedAVLNode<T>(p.right.data, p.right.balanceFactor,p.right.hasThread);
               else clTemp.right = null;
               if (p.left != null)
                  clTemp.left = new ThreadedAVLNode<T>(p.left.data, p.left.balanceFactor,p.right.hasThread);
               else clTemp.left = null;

               if (p.left != null) {
                  trueQ.add(p.left);
                  cloneQ.add(clTemp.left);
               }
               if (p.right != null) {
                  trueQ.add(p.right);
                  cloneQ.add(clTemp.right);
               }
            }
         }
         return clTree;
   }*/
