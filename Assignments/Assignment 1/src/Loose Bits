/*public Item findRootMonth(String month) {
		int i;
		for (i = 0; i < Mois.length; i++) {
			if (Mois[i].compareToIgnoreCase(month)==0)
				break;
		}
		return rootMonth[i];
	}*/


        /* cases
        1. (atRootDay && atRootMonth && onlyElAtDay)
        2. (atRootDay && atRootMonth && !onlyElAtDay)
        3. (atRootDay && !atRootMonth && onlyElAtDay)
        4. (atRootDay && !atRootMonth && !onlyElAtDay)
        5. (!atRootDay && atRootMonth && onlyElAtDay)
        6. (!atRootDay && atRootMonth && !onlyElAtDay)
        7. (!atRootDay && !atRootMonth && onlyElAtDay)
        8. (!atRootDay && !atRootMonth && !onlyElAtDay)
        */



        //If only element at day
        if (delNode.back == null) {
            System.out.println("delNode only event");
            prevD.right = delNode.right;
            prevM.down = delNode.down;
        }
        //If one of multiple elements that day
        else {
            System.out.println("delNode first of few events");
            prevD.right = delNode.back;
            prevM.down = delNode.back;
            delNode.back.right = delNode.right;
            delNode.back.down = delNode.down;

        }


        public Boolean findPriorityOnDate(Item temp, int p) {
        		while (temp != null) {
        			//loop through all elements at date
        			if (temp.getPriority() == p)
        				return true;
        			temp = temp.back;
        		}
        		//not found
        		return false;
        	}'



       if (month != "jan") {
       				cal.addItem(day, month, desc, dur, prior);
       			}
       			else {
       				System.out.println("\n" + i + ": " + day +" "+month + "\t:P:" + prior + "\tD:" + desc);
       				System.out.println("BEFORE");
       				cal.printMonthInfo("jan");
       				cal.addItem(day, month, desc, dur, prior);
       				System.out.println("AFTER");
       				cal.printMonthInfo("jan");
       			}



/* Complete this class to implement a fully functional sparse table. Read the comments to determine what each aspect of the class is supposed to do.
You must add any additional features (methods, references) which may aid you in your
task BUT you are not allowed to remove or change the names or properties of any of the features you were given.

Note: you are NOT allowed to use any 2D or 3D arrays to simulate the sparse table functionality. Doing so will result in a mark of zero.

Importing Java's built in data structures will result in a mark of zero. Only the use of native 1-dimensional is are allowed. *//*


public class Calendar
{
	//Attributes
	public String[] Mois = {"jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"};
	public Integer[] Jours = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
	public Item[] headMonthNode = new Item[12];
	public Item[] rootDay = new Item[31];


	public Calendar()
	{
		//Set to null
		for (int i = 0; i < 12; i++) {
			headMonthNode[i] = null;
		}
		for (int i = 0; i < 31; i++) {
			rootDay[i] = null;
		}

	}

	public void addItem(int day, String month, String description, String duration, int priority)
	{
		//Check validity: day, month(case), desc, dur, priority
		if (!isValidDay(day)) {
			//do what?
			day = Jours[0];
		}
		if (!isValidMonth(month)){
			//do what?
			month = Mois[0];
		}
		if (!isValidDuration(duration)){
			duration = "00:00";
		}
		if (!isValidPriority(priority)){
			priority = 0;
		}

		//Create node
		Item newNode = new Item(description,duration,priority,day, month.toLowerCase());


		//Insert in month
		insertAtMonth(newNode);

		//link month to days if necessary as well
		updateDaysAccordingly(newNode);

	}

	public void updateDaysAccordingly(Item newNode) {
		int day = newNode.getDay();
		//rootDay[i-1]

		//No events at day
		if (rootDay[day-1] == null) {
			rootDay[day-1] = newNode;
			newNode.right = null;
		}
		else {
			Item prev = null;
			Item curr = rootDay[day-1];

			//find right month
			while (curr!=null && newNode.getMonth()!=curr.getMonth()) {
				prev = curr;
				curr = curr.right;
			}
			//Equal??
				//Don't need to check since already inserted duplicates at month

			//first but non-empty
			if (prev==null) {
				rootDay[day-1] = newNode;
				newNode.right = curr;
			}
			//middle
			else {
				newNode.right = curr;
				prev.right = newNode;
			}
		}


	}

	public void insertAtMonth(Item newNode) {
		//Find month
		int i;
		for (i = 0; i < Mois.length; i++) {
			if (Mois[i].compareToIgnoreCase(newNode.getMonth())==0)
				break;
		}
		//if empty
		if (headMonthNode[i] == null) {
			headMonthNode[i] = newNode;
			newNode.down = null;
		}
		else {
			Item prev = null;
			Item curr = headMonthNode[i];

			//find appropriate place
			while (curr != null && newNode.getDay() > curr.getDay()) {
				prev = curr;
				curr = curr.down;

			}
			//If equal???
			if (curr!=null && (newNode.getDay()==curr.getDay())) {
				//Insert duplicate
				insertDuplicateAtMonth(prev, curr, newNode);
			}
			else {   	//Link
				//first?
				if (prev == null) {
					headMonthNode[i] = newNode;
					newNode.down = curr;
				}
				//later
				else {
					newNode.down = curr;
					prev.down = newNode;
				}
			}
		}
	}

	public void insertDuplicateAtMonth(Item prevDay, Item head, Item newNode){
		//Duplicate automatically implies full

		//At head
		if (newNode.getPriority() > head.getPriority()) {
			prevDay.down = newNode;
			newNode.down = head.down;
			newNode.back = head;
			head.down = null;
		}
		//Back
		else {
			//already checked first node
			Item prev = head;
			Item ptr = head.back;
			while (ptr != null && newNode.getPriority() <= ptr.getPriority()) {
				prev = ptr;
				ptr = ptr.back;
			}
			//Don't care about equal priorities
			newNode.back = ptr;
			prev.back = newNode;
		}
	}

	public boolean isValidDay(int day) {
		if (day>=1 && day<=31)
			return true;
		else
			return false;
	}

	public boolean isValidMonth(String month) {
		for (int i = 0; i < Mois.length; i++) {
			if (Mois[i].compareToIgnoreCase(month)==0)
				return true;
		}
		return false;
	}

	public boolean isValidPriority(int p) {
		if (p>=0)
			return true;
		else
			return false;
	}

	public boolean isValidDuration(String dur) {
		//Length
		if (dur.length() != 5)
			return false;
		//Semicolon
		Character ch = dur.charAt(2);
		if (ch != ':')
			return false;
		int hour = Integer.parseInt(dur.substring(0,2));
		int min = Integer.parseInt(dur.substring(3));
		if (hour < 0 || hour > 24)
			return false;
		if (min < 0 || min > 59)
			return false;
		return true;
	}

	public void printRootMonths() {

		System.out.println("First values for each month:");
		for (int i = 0; i < headMonthNode.length; i++) {
			if (headMonthNode[i] != null) {
				System.out.print(Mois[i] + " " + headMonthNode[i].getDay() + " P:" + headMonthNode[1].getPriority()+ "\n");
			}
			else {
				System.out.print(Mois[i] + " " + headMonthNode[i] + "\n");
			}
		}
		System.out.println(" ");
	}

	public void printRootDays() {
		System.out.println(" ");
		for (int i = 0; i < rootDay.length; i++) {
			if (rootDay[i] != null) {
				System.out.print(Jours[i] + " " + rootDay[i].getMonth() + "\n");
			}
			else {
				System.out.print(Jours[i] + " " + rootDay[i] + "\n");
			}
		}
	}

	public void printMonthInfo(String month) {
		//Find month
		int i;
		for (i = 0; i < Mois.length; i++) {
			if (Mois[i].compareToIgnoreCase(month)==0)
				break;
		}
		if (headMonthNode[i] == null) {
			System.out.println("\nMonth " + month + " has no items");
		}
		else{
			Item temp = headMonthNode[i];
			System.out.println("\nFor the month of " + month.toLowerCase());
			while (temp!= null){
				System.out.println(temp.getDay() + " P:" + temp.getPriority());
				temp = temp.down;
			}
		}
	}

	public Item findDate(int day, String mon){
		//Find month
        		int i;
        		for (i = 0; i < Mois.length; i++) {
        			if (Mois[i].compareToIgnoreCase(mon)==0)
        				break;
        		}
        		//Traverse Month
        		Item ptr = headMonthNode[i];
        		while (ptr!=null && ptr.getDay()!=day) {
        			ptr = ptr.down;
        		}

        		//not in List
        		if (ptr == null) {
        			return null;
        		}
        		//ptr now pointing at day
        		else {
        			return ptr;
        		}
	}

	public void printDate(int day, String mon) {
		Item head = findDate(day,mon);
		if (head==null) {
			System.out.println(mon.toUpperCase() + " " + day + " does not exist");
            System.out.println("\n");
		}
		else {
			System.out.println(mon.toUpperCase() + " " + day + ":");
			while (head!=null) {
				System.out.println("\tPriority: " + head.getPriority() + "\tDesc: " + head.getDescription());
				head = head.back;
			}
//            System.out.println('\n');
		}
	}

	private void deleteByCases(Item rootDay[], Item rootMonth[], int i, int day, Item delNode, Item prevD, Item prevM) {
		boolean atRootMonth = rootMonth[i] == delNode;
		boolean atRootDay = rootDay[day-1] == delNode;
		boolean onlyElAtDay = delNode.back == null;

		//Cases for Deletion: rootMonth, rootDay, onlyEle
		if (atRootDay && atRootMonth && onlyElAtDay) {
			//System.out.println("C1. atRootDay && atRootMonth && onlyElAtDay");
			rootDay[day-1] = delNode.right;
			rootMonth[i] = delNode.down;
		}
		else if (atRootDay && atRootMonth && !onlyElAtDay) {
			//System.out.println("C2. atRootDay && atRootMonth && !onlyElAtDay");
			rootDay[day-1] = delNode.back;
			rootMonth[i] = delNode.back;
			delNode.back.right = delNode.right;
			delNode.back.down = delNode.down;
		}
		else if (atRootDay && !atRootMonth && onlyElAtDay) {
			//System.out.println("C3. atRootDay && !atRootMonth && onlyElAtDay");
			rootDay[day-1] = delNode.right;
			prevM.down = delNode.down;
		}
		else if (atRootDay && !atRootMonth && !onlyElAtDay) {
			//System.out.println("C4. atRootDay && !atRootMonth && !onlyElAtDay");
			rootDay[day-1] = delNode.back;
			prevM.down = delNode.back;
			delNode.back.right = delNode.right;
			delNode.back.down = delNode.down;
		}
		else if (!atRootDay && atRootMonth && onlyElAtDay) {
			//System.out.println("C5. !atRootDay && atRootMonth && onlyElAtDay");
			prevD.right = delNode.right;
			rootMonth[i] = delNode.down;
		}
		else if (!atRootDay && atRootMonth && !onlyElAtDay) {
			//System.out.println("C6. !atRootDay && atRootMonth && !onlyElAtDay");
			prevD.right = delNode.back;
			rootMonth[i] = delNode.back;
			delNode.back.right = delNode.right;
			delNode.back.down = delNode.down;
		}
		else if (!atRootDay && !atRootMonth && onlyElAtDay) {
			//System.out.println("C7. !atRootDay && !atRootMonth && onlyElAtDay");
			prevD.right = delNode.right;
			prevM.down = delNode.down;
		}
		else if (!atRootDay && !atRootMonth && !onlyElAtDay) {
			//System.out.println("C8. atRootDay && !atRootMonth && !onlyElAtDay");
			prevD.right = delNode.right;
			prevM.down = delNode.back;
			delNode.back.right = delNode.right;
			delNode.back.down = delNode.down;
		}
		//System.out.println("Done! Should have deleted " + delNode.getDay() + " " + delNode.getMonth() + " " + delNode.getDescription());

	}

	public Item deleteItem(int day, String month, String description) {

		//MUST I ADD THIS?
		*/
/*//*
/Not in list
		if (findDate(day, month) == null) {
			System.out.println("Date not in list");
			return null;
		}*//*


		//Find Month
        int i;
        for (i = 0; i < Mois.length; i++) {
            if (Mois[i].compareToIgnoreCase(month) == 0)
                break;
        }
        //Traverse Month to correct day
        Item prevM = null;
        Item delNode = headMonthNode[i];
        while (delNode != null && delNode.getDay() != day) {
            prevM = delNode;
            delNode = delNode.down;
        }
        //not in List
        if (delNode == null) {
            return null;
        }

        if (prevM != null) {
            System.out.println("Prev day in Month: " + prevM.getDay() + " " + prevM.getMonth());
            System.out.println("Curr day in Month: " + delNode.getDay() + " " + delNode.getMonth() + "\tP: " + delNode.getPriority() + " D: " + delNode.getDescription());
        }


        //Check Description
        Item temp = delNode;
        if (delNode.getDescription() != description) {
            System.out.println("First node at day doesn't match description");
            //Traverse until find & delete
            Item prevDescr = null;
            while (temp != null && temp.getDescription() != description) {
                prevDescr = temp;
                temp = temp.back;
            }
            // Not in list
            if (temp == null) {
                System.out.println("Nodes at correct day don't match description");
                return null;
            }
            //In list but at back.
            //Unlink accordingly
            else if (prevDescr!=delNode)
            {
                System.out.println("Deleting node at back of list. P: " + temp.getPriority());
                prevDescr.back = temp.back;
                System.out.println("Done and dusted! \nShould have deleted " + delNode.getDay() + " " + delNode.getMonth() + " " + delNode.getDescription() + "\n");
                return delNode;
            }
        }
        //Correct monthNode now found: delNode at head of all elements at date

        // Find correct previous day
        Item prevD = null;
        temp = rootDay[day - 1];
        while (temp != null && temp != delNode) {
            prevD = temp;
            temp = temp.right;
        }

		deleteByCases(rootDay, headMonthNode, i, day, delNode, prevD, prevM);
        return delNode;
    }

	public void deletePriorityItem(int day, String month, int priority) {
		while (true) {
			//nonexistent date - return
			if (findDate(day, month) == null) {
				System.out.println("Date not in list");
				return;
			}

			//Find Month
			int i;
			boolean deleted = false;
			for (i = 0; i < Mois.length; i++) {
				if (Mois[i].compareToIgnoreCase(month) == 0)
					break;
			}

			//Traverse Month to correct day
			Item prevM = null;
			Item delNode = headMonthNode[i];
			while (delNode != null && delNode.getDay() != day) {
				prevM = delNode;
				delNode = delNode.down;
			}

			//Will bomb out if doesn't find

			//Find Priority
			Item temp = delNode;
			if (delNode.getPriority() != priority) {  //not first element
				//Traverse until find & delete
				Item prevDescr = null;
				while (temp != null && temp.getPriority() != priority) {
					prevDescr = temp;
					temp = temp.back;
				}
				// Not in list
				if (temp == null) {
					System.out.println("Date doesn't exist");
					return;
				}
				//In list but at back.
				//Unlink accordingly
				else if (prevDescr != delNode) {
					//System.out.println("Deleting node at back of list. P: " + temp.getPriority());
					prevDescr.back = temp.back;
					deleted = true;
					System.out.println("Dusted! Should have deleted " + delNode.getDay() + " " + delNode.getMonth() + " " + delNode.getDescription());
				}
			}
			// Node is the first node at date

			if (!deleted) {
				// Find correct previous day
				Item prevD = null;
				temp = rootDay[day - 1];
				while (temp != null && temp != delNode) {
					prevD = temp;
					temp = temp.right;
				}

				//delete Node
				deleteByCases(rootDay, headMonthNode, i, day, delNode, prevD, prevM);

				//Done!
			}
			//printDate(day, month);
		}

	}

	public void deleteItems(int day, String month) {
		*/
/*Delete all items at the given day and month combination.*//*

		//Just unlink head?
		if (findDate(day, month) == null) {
			System.out.println("Date not in list");
			return;
		}
		//Find Month
		int i;
		for (i = 0; i < Mois.length; i++) {
			if (Mois[i].compareToIgnoreCase(month) == 0)
				break;
		}
		//Traverse Month to correct day
		Item prevM = null;
		Item delNode = headMonthNode[i];
		while (delNode != null && delNode.getDay() != day) {
			prevM = delNode;
			delNode = delNode.down;
		}
		//not in List
		if (delNode == null) {
			System.out.println("Node not in list");
			return;
		}
		// Find correct previous day
		Item temp = delNode;
		Item prevD = null;
		temp = rootDay[day - 1];
		while (temp != null && temp != delNode) {
			prevD = temp;
			temp = temp.right;
		}

		//Unlinkings
		boolean atRootMonth = headMonthNode[i] == delNode;
		boolean atRootDay = rootDay[day-1] == delNode;
		//Cases for Deletion: rootMonth, rootDay
		if (atRootDay && atRootMonth) {
			System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C1. atRootDay && atRootMonth && onlyElAtDay");
			rootDay[day-1] = delNode.right;
			headMonthNode[i] = delNode.down;
		}
		else if (atRootDay && !atRootMonth) {
			System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C3. atRootDay && !atRootMonth && onlyElAtDay");
			rootDay[day-1] = delNode.right;
			prevM.down = delNode.down;
		}
		else if (!atRootDay && atRootMonth) {
			System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C5. !atRootDay && atRootMonth && onlyElAtDay");
			prevD.right = delNode.right;
			headMonthNode[i] = delNode.down;
		}
		else if (!atRootDay && !atRootMonth) {
			System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C7. !atRootDay && !atRootMonth && onlyElAtDay");
			prevD.right = delNode.right;
			prevM.down = delNode.down;
		}

	}



	*/
/*Clearing Methods*//*

	public void clearMonth(String month)
	{
		*/
/*All items for the given month should be deleted.
		If the month has no Items, simply do nothing.*//*


		Item headMonthNode = getMonthItem(month);

		//Empty Month
		if (headMonthNode == null) {
			System.out.println("Empty Month. Do zilch");
			return;
		}
		else {
			//while still elements in rootMonth
			while (headMonthNode != null) {  //is hierdie reg? nie eerder rootMonth[i].down == null
				//get Data
				deleteItems(headMonthNode.getDay(), headMonthNode.getMonth());
				headMonthNode = getMonthItem(month);
			}

		}

	}

	public void clearDay(int day)
	{
		*/
/*All items for the given day should be deleted.
		If the day has no Items, simply do nothing.*//*

	}

	public void clearYear()
	{
		*/
/*Delete all Items from the calendar.*//*

		for (int i = 0; i < 12; i++) {
			headMonthNode[i] = null;
		}
		for (int i = 0; i < 31; i++) {
			rootDay[i] = null;
		}

	}


	public Item getMonthItem(String month)
	{
		//Valid?
		if (!isValidMonth(month))
			return null;
		//find Month
		int i;
		for (i = 0; i < Mois.length; i++) {
			if (Mois[i].compareToIgnoreCase(month) == 0) {
				if (headMonthNode[i] == null)
					return null;
				else
					return headMonthNode[i];
			}
		}
		//didn't find month
		return null;
	}

	public Item getItem(int day, String month) {

		Item headMonthNode = getMonthItem(month);

		//traverse Month to day
		Item temp = headMonthNode;
		while (temp!=null && temp.getDay()!=day) {
			temp = temp.down;
		}
		if (temp==null)
			return null;
		else
			return temp;
	}


	public Item getDayItem(int day)
	{
		if (!isValidDay(day))
			return null;

		int i;
		for (i=0; i<Jours.length; i++) {
			if (Jours[i].compareTo(day) == 0) {
				if (rootDay[i] == null)
					return null;
				else
					return headMonthNode[i];
			}
		}
		return null;
	}
}
*/


/*	public Item findDate(int day, String mon){
		//Find month
		int i;
		for (i = 0; i < Mois.length; i++) {
			if (Mois[i].compareToIgnoreCase(mon)==0)
				break;
		}
		//Traverse Month
		Item ptr = rootMonth[i];
		while (ptr!=null && ptr.getDay()!=day) {
			ptr = ptr.down;
		}

		//not in List
		if (ptr == null) {
			return null;
		}
		//ptr now pointing at day
		else {
			return ptr;
		}
	}*/


	/*//Just unlink head?
            if (findDate(day, month) == null) {
                return;
            }

            //Find Month
            Item headMonthNode = getMonthItem(month);

            //Traverse Month to correct day
            Item prevM = getPrevM(headMonthNode, day);
            Item delNode = findDate(day, month);

            //not in List
            if (delNode == null) {
                return;
            }
            // Find correct previous day
            Item prevD = getPrevD(delNode, day);

            //Unlinkings
            boolean atRootMonth = (headMonthNode == delNode);
            boolean atRootDay = (rootDay[day-1] == delNode);

            //find Mois[i]
            int m;
            for (m = 0; m < Mois.length; m++) {
                if (rootMonth[m]!=null && headMonthNode.getDay() == rootMonth[m].getDay()) {
                    break;
                }
            }

            if (atRootDay && atRootMonth) {
                System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C1. atRootDay && atRootMonth && onlyElAtDay");
                rootDay[day-1] = delNode.right;
                rootMonth[m] = delNode.down;
            }
            else if (atRootDay && !atRootMonth) {
                System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C3. atRootDay && !atRootMonth && onlyElAtDay");
                rootDay[day-1] = delNode.right;
                prevM.down = delNode.down;
            }
            else if (!atRootDay && atRootMonth) {
                System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C5. !atRootDay && atRootMonth && onlyElAtDay");
                prevD.right = delNode.right;
                rootMonth[m] = delNode.down;
            }
            else if (!atRootDay && !atRootMonth) {
                System.out.println(delNode.getDay() + " " + delNode.getMonth() + "\t C7. !atRootDay && !atRootMonth && onlyElAtDay");
                prevD.right = delNode.right;
                prevM.down = delNode.down;
            }
        }*/


        /*	private void insertDuplicateAtMonth(Item prevDay, Item curr, Item newNode){
        		//Duplicate automatically implies full
        		//At head
        		if (newNode.getPriority() > curr.getPriority()) {
        			prevDay.down = newNode;
        			newNode.down = curr.down;
        			newNode.back = curr;
        			curr.down = null;
        		}
        		Item prev = curr;
        		Item ptr = curr;
        		while (ptr != null && newNode.getPriority() <= ptr.getPriority()) {
        			prev = ptr;
        			ptr = ptr.back;
        		}
        		//Don't care about equal priorities
        		newNode.back = ptr;
        		prev.back = newNode;

        	}*/


UPDATE DAYS ACCORDINGLY
/*Item ptr = rootDay[day-1].right;
			Item prev = rootDay[day-1];
			while (ptr != null && ptr.getMonth() < month) {
				prev = ptr;
				ptr = ptr.right;
			}
			//end of list
			if (ptr==null) {
				prev.right = newNode;
				newNode.right = ptr;
			}
			else if (ptr.getMonth()==month) {
				//duplicate
				if (ptr.getPriority() <= newNode.getPriority()) {
					prev.right = newNode;
					newNode.back = ptr.back;
					newNode.right = ptr;
				}
				else {
					//do nothing. already at back
				}
			}
			else {
				prev.right = newNode;
				newNode.right = ptr;
			}*/